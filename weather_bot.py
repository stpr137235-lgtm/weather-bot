from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import requests
import os

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: user_id -> city_name
user_city = {}

from telegram import ReplyKeyboardMarkup

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        ["üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è"],
        ["üåê –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", "üê±üê∂ –ö–æ—Ç–æ–ø—ë—Å–∏–∫–∏ü•∞"]
    ],
    resize_keyboard=True
)

# üîß –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–≤–æ–∏ –∫–ª—é—á–∏
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENWEATHERMAP_API_KEY = os.getenv("OPENWEATHERMAP_API_KEY")


# üå§ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
import requests
from datetime import datetime, timedelta
import pytz
from timezonefinder import TimezoneFinder

OPENWEATHERMAP_API_KEY = os.getenv("OPENWEATHERMAP_API_KEY")

def get_weather(city: str) -> str:
    # --- –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ ---
    current_url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHERMAP_API_KEY}&units=metric&lang=ru'
    current_response = requests.get(current_url)

    if current_response.status_code != 200:
        return '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ωü•≤'

    current_data = current_response.json()

    temp = current_data['main']['temp']
    feels_like = current_data['main']['feels_like']
    pressure_hpa = current_data['main']['pressure']
    pressure_mmHg = round(pressure_hpa * 0.75006)
    weather = current_data['weather'][0]['description']
    humidity = current_data['main']['humidity']
    wind_speed = current_data['wind']['speed']

    # --- –í—Ä–µ–º—è –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å ---
    lat = current_data['coord']['lat']
    lon = current_data['coord']['lon']

    tf = TimezoneFinder()
    timezone_str = tf.timezone_at(lat=lat, lng=lon) or 'UTC'
    tz = pytz.timezone(timezone_str)
    now = datetime.now(tz)

    time_str = now.strftime('%H:%M')
    weekday_ru = {
        'Monday': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'Tuesday': '–≤—Ç–æ—Ä–Ω–∏–∫',
        'Wednesday': '—Å—Ä–µ–¥–∞',
        'Thursday': '—á–µ—Ç–≤–µ—Ä–≥',
        'Friday': '–ø—è—Ç–Ω–∏—Ü–∞',
        'Saturday': '—Å—É–±–±–æ—Ç–∞',
        'Sunday': '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    date_formatted = f"{weekday_ru[now.strftime('%A')]} {now.strftime('%d.%m.%Y')}"

    # --- –í–æ—Å—Ö–æ–¥ –∏ –∑–∞–∫–∞—Ç ---
    sunrise = datetime.fromtimestamp(current_data['sys']['sunrise'], tz)
    sunset = datetime.fromtimestamp(current_data['sys']['sunset'], tz)
    sunrise_str = sunrise.strftime('%H:%M')
    sunset_str = sunset.strftime('%H:%M')

    # --- –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ---
    forecast_url = f'https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={OPENWEATHERMAP_API_KEY}&units=metric&lang=ru'
    forecast_response = requests.get(forecast_url)

    if forecast_response.status_code != 200:
        return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ãüòê'

    forecast_data = forecast_response.json()

    forecast_today = {
        'morning': [],
        'day': [],
        'evening': [],
        'night': []
    }

    for item in forecast_data['list']:
        dt_utc = datetime.utcfromtimestamp(item['dt']).replace(tzinfo=pytz.utc).astimezone(tz)
        forecast_date = dt_utc.date()
        hour = dt_utc.hour
        temp = round(item['main']['temp'])
        description = item['weather'][0]['description']

        # üåÖ –£—Ç—Ä–æ: 03:00‚Äì10:00
        if forecast_date == now.date() and 3 <= hour < 10:
            forecast_today['morning'].append((temp, description))

        # üå§ –î–µ–Ω—å: 10:00‚Äì17:00
        elif forecast_date == now.date() and 10 <= hour < 17:
            forecast_today['day'].append((temp, description))

        # üåá –í–µ—á–µ—Ä: 17:00‚Äì21:00
        elif forecast_date == now.date() and 17 <= hour < 21:
            forecast_today['evening'].append((temp, description))

        # üåÉ –ù–æ—á—å: 21:00‚Äì23:59 —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
        elif forecast_date == now.date() and 21 <= hour <= 23:
            forecast_today['night'].append((temp, description))

        # üåÉ –ù–æ—á—å: 00:00‚Äì03:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
        elif forecast_date == now.date() + timedelta(days=1) and 0 <= hour < 3:
            forecast_today['night'].append((temp, description))

    def summarize(period_data):
        if not period_data:
            return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        avg_temp = round(sum(t for t, _ in period_data) / len(period_data))
        common_desc = max(set(d for _, d in period_data), key=lambda d: [desc for _, desc in period_data].count(d))
        return f"{avg_temp}¬∞C, {common_desc}"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ª–æ–∫–∞–ª—å–Ω–æ–µ)
    current_hour = now.hour

    # –ì–æ—Ç–æ–≤–∏–º —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
    forecast_parts = []
    forecast_parts.append("üïë –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å—Ç–∞—Ç–æ–∫ –¥–Ω—è:")

    if current_hour < 10:
        forecast_parts.append(f"üåÖ –£—Ç—Ä–æ {summarize(forecast_today['morning'])}")
    if current_hour < 17:
        forecast_parts.append(f"üå§ –î–µ–Ω—å {summarize(forecast_today['day'])}")
    if current_hour < 21:
        forecast_parts.append(f"üåá –í–µ—á–µ—Ä {summarize(forecast_today['evening'])}")
    if current_hour >= 21 or current_hour < 3:
        forecast_parts.append(f"üåÉ –ù–æ—á—å {summarize(forecast_today['night'])}")

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—ë –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
    forecast_text = "\n".join(forecast_parts)

    # --- –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ ---
    air_quality_url = f"http://api.openweathermap.org/data/2.5/air_pollution?lat={lat}&lon={lon}&appid={OPENWEATHERMAP_API_KEY}"
    air_response = requests.get(air_quality_url)
    air_quality_text = ""
    if air_response.status_code == 200:
        air_data = air_response.json()
        if "list" in air_data and air_data["list"]:
            pm2_5 = air_data["list"][0]["components"]["pm2_5"]
            pm10 = air_data["list"][0]["components"]["pm10"]

            def classify_air_quality(pm2_5, pm10):
                max_value = max(pm2_5, pm10)
                if max_value <= 12:
                    return "üü¢ –û—Ç–ª–∏—á–Ω–æ–µ"
                elif max_value <= 35:
                    return "üü° –•–æ—Ä–æ—à–µ–µ"
                elif max_value <= 55:
                    return "üü† –£–º–µ—Ä–µ–Ω–Ω–æ–µ"
                elif max_value <= 150:
                    return "üî¥ –ü–ª–æ—Ö–æ–µ"
                else:
                    return "‚ö´ –û–ø–∞—Å–Ω–æ–µ"

            quality = classify_air_quality(pm2_5, pm10)
            air_quality_text = f"\nüå´ –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ {quality} (PM2.5: {pm2_5} ¬µg/m¬≥, PM10: {pm10} ¬µg/m¬≥)"

    # --- –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç ---
    return (
        f"üìç {city.title()} | {weekday_ru[now.strftime('%A')].capitalize()}, {now.strftime('%d.%m')}\n"
        f"üïí –°–µ–π—á–∞—Å {time_str}\n\n"
        f"üå° {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞Cü§î)\n"
        f"{WEATHER_EMOJI.get(weather.lower(), '')} {weather.capitalize()}\n"
        f"üíß {humidity}% | üå¨ {wind_speed} –º/—Å | üîΩ {pressure_mmHg} –º–º\n\n"
        f"üåÖ –í–æ—Å—Ö–æ–¥ –≤ {sunrise_str} | üåá –ó–∞–∫–∞—Ç –≤ {sunset_str}"
        f"{air_quality_text}\n\n"
        f"{forecast_text}"
    )

from datetime import datetime, timedelta
import pytz

# –°–ª–æ–≤–∞—Ä—å: –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ ‚Üí –≤ –ø—Ä–µ–¥–ª–æ–∂–Ω–æ–º –ø–∞–¥–µ–∂–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
DAYS_RU_PREPOSITIONAL = {
    "Monday": "–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–≤–æ –≤—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "–≤ —Å—Ä–µ–¥—É",
    "Thursday": "–≤ —á–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–≤ –ø—è—Ç–Ω–∏—Ü—É",
    "Saturday": "–≤ —Å—É–±–±–æ—Ç—É",
    "Sunday": "–≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

WEATHER_EMOJI = {
    "—è—Å–Ω–æ": "‚òÄÔ∏è",
    "–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏": "üå§",
    "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "üå•",
    "–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "‚õÖÔ∏è",
    "–ø–∞—Å–º—É—Ä–Ω–æ": "‚òÅÔ∏è",
    "–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å": "üå¶",
    "–¥–æ–∂–¥—å": "üåß",
    "—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å": "üåßüåß",
    "–≥—Ä–æ–∑–∞": "‚õà",
    "–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥": "üå®",
    "—Å–Ω–µ–≥": "‚ùÑÔ∏è",
    "—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥": "‚ùÑÔ∏è‚ùÑÔ∏è",
    "—Ç—É–º–∞–Ω": "üå´",
    "–º–æ—Ä–æ—Å—å": "üåß",
    "–ª–∏–≤–µ–Ω—å": "üåßüíß",
    "—à—Ç–æ—Ä–º": "üå™",
}

def get_three_day_forecast(city_name):
    url = f"http://api.openweathermap.org/data/2.5/forecast?q={city_name}&appid={OPENWEATHERMAP_API_KEY}&units=metric&lang=ru"
    response = requests.get(url)
    if response.status_code != 200:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã üòï"

    data = response.json()
    if "city" not in data:
        return "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω üòî"

    city_info = data["city"]
    timezone_offset = city_info["timezone"]  # —Å–º–µ—â–µ–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    tz = pytz.FixedOffset(timezone_offset // 60)

    forecasts = data["list"]
    forecast_by_date = {}

    for entry in forecasts:
        dt_utc = datetime.utcfromtimestamp(entry["dt"]).replace(tzinfo=pytz.utc)
        dt_local = dt_utc.astimezone(tz)
        date_str = dt_local.strftime("%Y-%m-%d")
        hour = dt_local.hour

        # –£—Å–ª–æ–≤–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        if 3 <= hour < 10:
            period = "–£—Ç—Ä–æ"
        elif 10 <= hour < 17:
            period = "–î–µ–Ω—å"
        elif 17 <= hour < 21:
            period = "–í–µ—á–µ—Ä"
        else:
            period = "–ù–æ—á—å"

        if date_str not in forecast_by_date:
            forecast_by_date[date_str] = {}

        if period not in forecast_by_date[date_str]:
            forecast_by_date[date_str][period] = []

        forecast_by_date[date_str][period].append(entry)

    # –ü–æ–ª—É—á–∞–µ–º 3 —Å–ª–µ–¥—É—é—â–∏—Ö –¥–Ω—è
    today = datetime.utcnow().astimezone(tz).date()
    result = ""

    for i in range(1, 4):
        target_date = today + timedelta(days=i)
        date_str = target_date.strftime("%Y-%m-%d")
        weekday_en = target_date.strftime("%A")
        weekday_ru_prep = DAYS_RU_PREPOSITIONAL.get(weekday_en, weekday_en)
        date_display = f"{weekday_ru_prep.capitalize()} {target_date.strftime('%d.%m')}"

        result += f"\nüìÖ {date_display}:\n"

        if date_str not in forecast_by_date:
            result += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            continue

        for period in ["–£—Ç—Ä–æ", "–î–µ–Ω—å", "–í–µ—á–µ—Ä", "–ù–æ—á—å"]:
            entries = forecast_by_date[date_str].get(period)
            if not entries:
                result += f"{period} ‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
                continue

            temps = [e["main"]["temp"] for e in entries]
            descriptions = [e["weather"][0]["description"] for e in entries]
            wind_speeds = [e["wind"]["speed"] for e in entries]

            avg_temp = round(sum(temps) / len(temps))
            common_desc = max(set(descriptions), key=descriptions.count)
            emoji = WEATHER_EMOJI.get(common_desc.lower(), "")
            avg_wind = round(sum(wind_speeds) / len(wind_speeds), 1)

            result += f"{period} | {avg_temp}¬∞C | {common_desc} | {avg_wind} –º/—Å\n"

    return result.strip()


import random
import requests
from telegram import Update
from telegram.ext import ContextTypes


async def send_random_pet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        choice = random.choice(["cat", "dog"])

        if choice == "cat":
            url = f"https://cataas.com/cat?{random.randint(1, 10000)}"
            await context.bot.send_photo(chat_id=update.effective_chat.id, photo=url)
        else:
            # –ü—Ä–æ–±—É–µ–º –¥–æ 5 —Ä–∞–∑ –Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ-–ø—Å–∞
            for _ in range(100):
                response = requests.get("https://random.dog/woof.json").json()
                url = response["url"]
                if url.endswith((".jpg", ".jpeg", ".png")):
                    await context.bot.send_photo(chat_id=update.effective_chat.id, photo=url)
                    return

            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ —Ç–∞–∫ –∏ –Ω–µ –Ω–∞—à–ª–æ—Å—å
            await update.message.reply_text("–í—Å–µ –ø—ë—Å–∏–∫–∏ –∑–∞–Ω—è—Ç—ã —Å—ä—ë–º–∫–∞–º–∏ üé¨üê∂ –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    except Exception:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–æ–ø—ë—Å–∏–∫–∞ üòøüê∂")


# üõ† –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
from telegram import Update
from telegram.ext import ContextTypes

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_first_name = update.effective_user.first_name or "–¥—Ä—É–≥"
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user_first_name}! üëã\n"
        "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –ø–æ–≥–æ–¥—É üå§",
        reply_markup=main_keyboard
    )

# üì© –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    # –ö–Ω–æ–ø–∫–∞ "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"
    if text == "üåê –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥":
        user_city[user_id] = None
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:")
        return

    # –ö–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"
    if text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑":
        city = user_city.get(user_id)
        if not city:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ ü•π")
            return
        weather_info = get_weather(city)
        await update.message.reply_text(weather_info, reply_markup=main_keyboard)
        return

    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è"
    if text == "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è":
        city = user_city.get(user_id)
        if not city:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ ü•π", reply_markup=main_keyboard)
            return

        forecast = get_three_day_forecast(city)
        await update.message.reply_text(forecast, reply_markup=main_keyboard)
        return

    # –ö–Ω–æ–ø–∫–∞ "–ö–æ—Ç–µ–π–∫–∏"
    if text == "üê±üê∂ –ö–æ—Ç–æ–ø—ë—Å–∏–∫–∏ü•∞":
        await send_random_pet(update, context)
        return

    # –í–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    city = text
    user_city[user_id] = city
    weather_info = get_weather(city)
    await update.message.reply_text(weather_info, reply_markup=main_keyboard)


# üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == '__main__':
    main()